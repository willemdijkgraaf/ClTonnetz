;;; setup hash table for quick lookup
(defparameter *triad-interval-to-degrees* (make-hash-table :test 'equal))
;; major triads
(setf (gethash '(4 3) *triad-interval-to-degrees*) '(1 3 5))
(setf (gethash '(7 -3) *triad-interval-to-degrees*) '(1 3 5))
(setf (gethash '(8 -5) *triad-interval-to-degrees*) '(3 1 5))
(setf (gethash '(5 4) *triad-interval-to-degrees*) '(5 1 3))
(setf (gethash '(3 5) *triad-interval-to-degrees*) '(3 5 1))
(setf (gethash '(9 -4) *triad-interval-to-degrees*) '(5 3 1))

;; minor triads
(setf (gethash '(3 4) *triad-interval-to-degrees*) '(1 3 5))
(setf (gethash '(7 -4) *triad-interval-to-degrees*) '(1 3 5))
(setf (gethash '(9 -5) *triad-interval-to-degrees*) '(3 1 5))
(setf (gethash '(5 3) *triad-interval-to-degrees*) '(5 1 3))
(setf (gethash '(4 5) *triad-interval-to-degrees*) '(3 5 1))
(setf (gethash '(8 -3) *triad-interval-to-degrees*) '(5 3 1))

(defun get-root-intervals (triad)
  (midi-to-interval 
   (sort-asc (pitch-to-midi (ambitus-octaves 'c4 1 triad)))))

;;; tests
(equal (get-root-intervals '(g1 c9 e6)) '(4 3))
(equal (get-root-intervals '(f3 d4 a4)) '(3 4))

;;; return true if triad is major triad
(defun triad-is-major (triad)
  (find (get-root-intervals triad) '((4 3) (3 5) (5 4)) :test 'equal))
(defparameter triad '(c4 e4 g4))
;;;tests
(equal (triad-is-major '(c4 e4 g4)) 't)
(equal (triad-is-major '(c4 e3 g5)) 't)
(equal (triad-is-major '(c4 e5 g2)) 't)
(equal (triad-is-major '(e3 g4 c5)) 't)
(equal (triad-is-major '(g4 c5 e5)) 't)
(equal (triad-is-major '(c4 eb4 g4)) '())

(defun triad-to-intervals (triad)
   (midi-to-interval (modus (pitch-transpose (- 0 (find-min (pitch-to-midi triad))) triad))))

;;; tests
(equal (triad-to-intervals '(c3 e4 g5)) '(4 3))  ; 1 3 5
(equal (triad-to-intervals '(c3 g4 e5)) '(7 -3)) ; 1 5 3 
(equal (triad-to-intervals '(e3 c4 g5)) '(8 -5)) ; 3 1 5 
(equal (triad-to-intervals '(g3 c4 e5)) '(5 4)) ; 5 1 3 
(equal (triad-to-intervals '(e3 g4 c5)) '(3 5)) ; 3 5 1 
(equal (triad-to-intervals '(g3 e4 c5)) '(9 -4)) ; 5 3 1

(equal (triad-to-intervals '(c3 eb4 g5)) '(3 4))  ; 1 3 5
(equal (triad-to-intervals '(c3 g4 eb5)) '(7 -4)) ; 1 5 3 
(equal (triad-to-intervals '(eb3 c4 g5)) '(9 -5)) ; 3 1 5 
(equal (triad-to-intervals '(g3 c4 eb5)) '(5 3)) ; 5 1 3 
(equal (triad-to-intervals '(eb3 g4 c5)) '(4 5)) ; 3 5 1 
(equal (triad-to-intervals '(g3 eb4 c5)) '(8 -3)) ; 5 3 1

;;; input 3 notes and output which note is the root, the 3rd and the 5th
(defun triad-to-degrees (triad)
  (let ((triad-midi (pitch-to-midi (ambitus-octaves 'c4 1 triad)))
        (root-intervals '())
        (triad-sorted '())
        (degrees '())
        (index 0)
        (degree 0)
        (ind 0)
        (ret '(0 0 0)))
    (setf root-intervals (get-root-intervals triad))
    (setf triad-sorted (sort-asc triad-midi))
    (setf degrees (gethash root-intervals *triad-interval-to-degrees*))
    (dolist (note triad-sorted)
      (setf degree (nth index degrees))
      (setf ind (position note triad-midi))
      (setf (nth ind ret) degree)
      (incf index))
    (print ret)))

;;; tests
(equal (triad-to-degrees '(c4 e4 g4)) '(1 3 5))
(equal (triad-to-degrees '(c4 g4 e4)) '(1 5 3))
(equal (triad-to-degrees '(e4 c4 g4)) '(3 1 5))
(equal (triad-to-degrees '(g4 c4 e4)) '(5 1 3))
(equal (triad-to-degrees '(e4 g4 c4)) '(3 5 1))
(equal (triad-to-degrees '(g4 e4 c4)) '(5 3 1))

(equal (triad-to-degrees '(c4 eb4 g4)) '(1 3 5))
(equal (triad-to-degrees '(c4 g4 eb4)) '(1 5 3))
(equal (triad-to-degrees '(eb4 c4 g4)) '(3 1 5))
(equal (triad-to-degrees '(g4 c4 eb4)) '(5 1 3))
(equal (triad-to-degrees '(eb4 g4 c4)) '(3 5 1))
(equal (triad-to-degrees '(g4 eb4 c4)) '(5 3 1))

(equal (triad-to-degrees '(gb4 bb4 db4)) '(1 3 5))
(equal (triad-to-degrees '(gb4 db4 bb4)) '(1 5 3))
(equal (triad-to-degrees '(bb4 gb4 db4)) '(3 1 5))
(equal (triad-to-degrees '(db4 gb4 bb4)) '(5 1 3))
(equal (triad-to-degrees '(bb4 db4 gb4)) '(3 5 1))

(equal (triad-to-degrees '(gb4 a4 db4)) '(1 3 5))
(equal (triad-to-degrees '(gb4 db4 a4)) '(1 5 3))


(equal (triad-to-degrees '(e4 c4 g4)) '(3 1 5))
(equal (triad-to-degrees '(g4 c4 e4)) '(5 1 3))
(equal (triad-to-degrees '(e4 g4 c4)) '(3 5 1))
(equal (triad-to-degrees '(g4 e4 c4)) '(5 3 1))
(equal (triad-to-degrees '(c4 eb4 g4)) '(1 3 5))
(equal (triad-to-degrees '(c4 g4 eb4)) '(1 5 3))
(equal (triad-to-degrees '(eb4 c4 g4)) '(3 1 5))
(equal (triad-to-degrees '(g4 c4 eb4)) '(5 1 3))
(equal (triad-to-degrees '(eb4 g4 c4)) '(3 5 1))
(equal (triad-to-degrees '(g4 eb4 c4)) '(5 3 1))

(defparameter *tonnetz-params* (make-hash-table :test 'equal))
(setf (gethash 'l *tonnetz-params*) '((1 -1) (5 1)))
(setf (gethash 'p *tonnetz-params*) '((3 -1) (3 1)))
(setf (gethash 'r *tonnetz-params*) '((5 2) (1 -2))) 

(defparameter *tonnetz-moves* (make-hash-table :test 'equal))
(setf (gethash 'l *tonnetz-moves*) (lambda (triad) (move triad 'l)))
(setf (gethash 'p *tonnetz-moves*) (lambda (triad) (move triad 'p)))
(setf (gethash 'r *tonnetz-moves*) (lambda (triad) (move triad 'r)))
(setf (gethash 'n *tonnetz-moves*) (lambda (triad) (move (move (move triad 'r) 'l) 'p)))
(setf (gethash 's *tonnetz-moves*) (lambda (triad) (move (move (move triad 'l) 'p) 'r)))

(defun move (triad move) 
  (let ((degrees (triad-to-degrees triad))
        (triad-v (list-to-vector (pitch-to-midi triad)))
        (index 0)
        (config '()))
    (if (triad-is-major triad)
      (setf config (first (gethash move *tonnetz-params*)))
      (setf config (second (gethash move *tonnetz-params*))))
    (setf index (position (first config) degrees))
    (incf (aref triad-v index) (second config))
    (midi-to-pitch (vector-to-list triad-v))))


(defun apply-tonnetz (triad moves)
  (let ((ret (list triad)))
    (dolist (move moves)
      (push (funcall (gethash move *tonnetz-moves*) triad) ret))
    (reverse ret)))

(defparameter triad '(c4 e4 g4))
;;; tests L-move
(equal (apply-tonnetz '(c4 e4 g4) '(l)) '((c4 e4 g4)(b3 e4 g4))) ; L-move starting on major triad
(equal (apply-tonnetz '(c4 eb4 g4) '(l)) '((c4 eb4 g4)(c4 eb4 gs4))) ; L-move starting on minor triad
(equal (apply-tonnetz '(eb4 gb4 bb4) '(l)) '((eb4 gb4 bb4)(eb4 fs4 b4))) ; L-move starting on minor triad

;;; tests P-move
(equal (apply-tonnetz '(c4 e4 g4) '(p)) '((c4 e4 g4)(c4 eb4 g4))) ; P-move starting on major triad
(equal (apply-tonnetz '(c4 eb4 g4) '(p)) '((c4 eb4 g4)(c4 e4 g4))) ; P-move starting on minor triad

;;; tests R-move
(equal (apply-tonnetz '(c4 e4 g4) '(r)) '((c4 e4 g4)(c4 e4 a4))) ; R-move starting on major triad
(equal (apply-tonnetz '(c4 eb4 g4) '(r)) '((c4 eb4 g4)(bb3 eb4 g4))) ; R-move starting on minor triad

;;; tests N-move
(equal (apply-tonnetz '(c4 e4 g4) '(n)) '((c4 e4 g4)(c4 f4 gs4))) ; N-move starting on major triad
(equal (apply-tonnetz '(c4 eb4 g4) '(n)) '((c4 eb4 g4)(b3 d4 g4))) ; N-move starting on minor triad

;;; tests S-move
(equal (apply-tonnetz '(c4 e4 g4) '(s)) '((c4 e4 g4)(cs4 e4 gs4))) ; S-move starting on major triad
(equal (apply-tonnetz '(c4 eb4 g4) '(s)) '((c4 eb4 g4)(b3 eb4 fs4))) ; S-move starting on minor triad

;;; HERE THE USAGE IS SHOWN 
(setf moves '(l r n s p))
(setf harmonies (apply-tonnetz '(eb4 gb4 bb4) moves))

(defun harmony-to-melody (harmonies voice-number)
  (let ((ret '()))
    (dolist (harmony harmonies)
      (setf ret (append ret (list (nth (- voice-number 1) harmony)))))
    (print ret)))

(setf melody-soprano (pitch-transpose 12 (harmony-to-melody harmonies 1)))
(setf melody-alto (harmony-to-melody harmonies 1))
(setf melody-tenor (pitch-transpose -12 (harmony-to-melody harmonies 2)))
(setf melody-bass (pitch-transpose -24 (harmony-to-melody harmonies 3)))

;;; THE REST IS BOILERPLATE ...
(setf size (/ (list-length harmonies) 2))
(setf bars (gen-repeat size '(4/4)))
(setf pause (length-span bars '(-q)))

(setf soprano (make-omn
 :length '(1/2)
 :pitch melody-soprano
 :velocity '(mp)
 :span :pitch))
(setf alto (make-omn
 :length '(1/2)
 :pitch melody-alto
 :velocity '(mp)
 :span :pitch))
(setf tenor (make-omn
 :length '(1/2)
 :pitch melody-tenor
 :velocity '(mp)
 :span :pitch))
(setf bass (make-omn
 :length '(1/2)
 :pitch melody-bass
 :velocity '(mp)
 :span :pitch))

;;;---------------------------------------------------------
;;; Score and Layout
;;;---------------------------------------------------------
(midi-destinations)
(def-score choir-satb
           (:title "Title"
            :composer "Composer"
            :copyright "Copyright Â© "
            :key-signature 'chromatic
            :time-signature '((1 1 1 1) 4)
            :tempo 42
            :layout (choir-satb-layout
                     'soprano 'alto 'tenor 'bass))
  
  (soprano
   :port 0
   :omn soprano
   :channel 1
   :sound 'gm
   :program 'choir-aahs
   :volume 100
   :pan 16
   :controllers (91 '(48))
   )
  
  (alto
   :omn alto
   :channel 2
   :sound 'gm
   :program 'choir-aahs
   :volume 100
   :pan 41
   :controllers (91 '(48))
   )
  
  (tenor
   :omn tenor
   :channel 3
   :sound 'gm
   :program 'choir-aahs
   :volume 100
   :pan 86
   :controllers (91 '(48))
   )
  
  (bass
   :omn bass
   :channel 4
   :sound 'gm
   :program 'choir-aahs
   :volume 100
   :pan 111
   :controllers (91 '(48))
   )
  )

