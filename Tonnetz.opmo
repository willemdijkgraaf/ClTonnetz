;;; setup hash table for quick lookup
(defparameter *triad-interval-to-degrees* (make-hash-table :test 'equal))
;; major triads
(setf (gethash '(4 3) *triad-interval-to-degrees*) '(1 3 5))
(setf (gethash '(-4 7) *triad-interval-to-degrees*) '(3 1 5))
(setf (gethash '(3 -7) *triad-interval-to-degrees*) '(3 5 1))
(setf (gethash '(7 -3) *triad-interval-to-degrees*) '(1 5 3))
(setf (gethash '(-7 4) *triad-interval-to-degrees*) '(5 1 3))
(setf (gethash '(3 -4) *triad-interval-to-degrees*) '(5 3 1))
(setf (gethash '(3 5) *triad-interval-to-degrees*) '(3 5 1))
(setf (gethash '(5 4) *triad-interval-to-degrees*) '(5 1 3))
;; minor triads
(setf (gethash '(3 4) *triad-interval-to-degrees*) '(1 3 5))
(setf (gethash '(-3 7) *triad-interval-to-degrees*) '(3 1 5))
(setf (gethash '(4 -7) *triad-interval-to-degrees*) '(3 5 1))
(setf (gethash '(7 -4) *triad-interval-to-degrees*) '(1 5 3))
(setf (gethash '(-7 3) *triad-interval-to-degrees*) '(5 1 3))
(setf (gethash '(-4 -3) *triad-interval-to-degrees*) '(5 3 1))
(setf (gethash '(4 5) *triad-interval-to-degrees*) '(3 5 1))
(setf (gethash '(5 3) *triad-interval-to-degrees*) '(5 1 3))
(setf (gethash '(-8 5) *triad-interval-to-degrees*) '(3 5 1))

(defun triad-to-intervals (triad)
  (pitch-to-interval 
   (pitch-transpose 
    (- 0 (find-min (pitch-to-midi (ambitus-octaves 0 2 triad)))) 
    (ambitus-octaves 0 2 triad))))

;;; tests
(equal (triad-to-intervals '(c3 e4 g5)) '(4 3))
(equal (triad-to-intervals '(e3 g4 c5)) '(3 5))
(equal (triad-to-intervals '(g4 c5 e5)) '(3 5))

;;; return true if triad is major triad
(defun triad-is-major (triad)
  (let ((intervals (triad-to-intervals triad)))
   (cond
     ((find intervals '((4 3) (3 -7) (-7 4) (-8 3) (3 5) (5 -8)) :test 'equal) '(T))
     (T '()))))
;;;tests
(equal (triad-is-major '(c4 e4 g4)) '(t))
(equal (triad-is-major '(c4 e3 g5)) '(t))
(equal (triad-is-major '(c4 e5 g2)) '(t))
(equal (triad-is-major '(e3 g4 c5)) '(t))
(equal (triad-is-major '(g4 c5 e5)) '(t))
(equal (triad-is-major '(c4 eb4 g4)) '())

(defparameter triad '(eb4 gb4 bb4))

;;; input 3 notes and output which note is the root, the 3rd and the 5th
(defun triad-to-degrees (triad) 
  (let ((intervals (pitch-to-interval (ambitus-octaves 'c4 1 triad))))
    (gethash intervals *triad-interval-to-degrees*)))
;;; tests
(equal (triad-to-degrees '(c4 e4 g4)) '(1 3 5))
(equal (triad-to-degrees '(c4 eb4 g4)) '(1 3 5))
(equal (triad-to-degrees '(eb4 gb4 bb4)) '(1 3 5))

(defun move-l (triad) 
  (let ((degrees (triad-to-degrees triad))
        (triad-v (list-to-vector (pitch-to-midi triad)))
        (index))
    (if (triad-is-major triad)
      (progn
        (setf index (position '1 degrees))
        (decf (aref triad-v index)))
      (progn
        (setf index (position '5 degrees))
        (incf (aref triad-v index))))
    (midi-to-pitch (vector-to-list triad-v))))

;;; tests
(equal (move-l '(c4 e4 g4)) '(b3 e4 g4)) ; L-move starting on major triad
(equal (move-l '(c4 eb4 g4)) '(c4 eb4 gs4)) ; L-move starting on minor triad
(equal (move-l '(eb4 gb4 bb4)) '(eb4 fs4 b4)) ; L-move starting on minor triad

(defun move-p (triad) 
  (let ((degrees (triad-to-degrees triad))
        (triad-v (list-to-vector (pitch-to-midi triad)))
        (index))
    (if (triad-is-major triad)
      (progn
        (setf index (position '3 degrees))
        (decf (aref triad-v index)))
      (progn
        (setf index (position '3 degrees))
        (incf (aref triad-v index))))
    (midi-to-pitch (vector-to-list triad-v))))
;;; tests
(equal (move-p '(c4 e4 g4)) '(c4 eb4 g4)) ; P-move starting on major triad
(equal (move-p '(c4 eb4 g4)) '(c4 e4 g4)) ; P-move starting on minor triad

(defun move-r (triad) 
  (let ((degrees (triad-to-degrees triad))
        (triad-v (list-to-vector (pitch-to-midi triad)))
        (index))
    (if (triad-is-major triad)
      (progn
        (setf index (position '5 degrees))
        (incf (aref triad-v index) 2))
      (progn
        (setf index (position '1 degrees))
        (decf (aref triad-v index) 2)))
    (midi-to-pitch (vector-to-list triad-v))))
;;; tests
(equal (move-r '(c4 e4 g4)) '(c4 e4 a4)) ; R-move starting on major triad
(equal (move-r '(c4 eb4 g4)) '(bb3 eb4 g4)) ; R-move starting on minor triad

(defun move-n (triad)
  (move-p (move-l (move-r triad))))
;;; tests
(equal (move-n '(c4 e4 g4)) '(c4 f4 gs4)) ; N-move starting on major triad
(equal (move-n '(c4 eb4 g4)) '(b3 d4 g4)) ; N-move starting on minor triad

(defun move-s (triad)
  (move-r (move-p (move-l triad))))
;;; tests
(equal (move-s '(c4 e4 g4)) '(cs4 e4 gs4)) ; S-move starting on major triad
(equal (move-s '(c4 eb4 g4)) '(b3 eb4 fs4)) ; S-move starting on minor triad

(defun tn-l (triad)
  (move-l triad))
(defun tn-r (triad)
  (move-r triad))
(defun tn-p (triad)
  (move-r triad))
(defun tn-n (triad)
  (move-n triad))
(defun tn-s (triad)
  (move-s triad))

(defun to-tonnetz (triad moves)
  (let ((ret (list triad)))
    (dolist (move moves)
      (print ret)
      (push (funcall move (first ret)) ret))
    (reverse ret)))

;;; HERE THE USAGE IS SHOWN 
(setf starting-triad '((eb4 gb4 bb4)))
(setf moves '(tn-l tn-r tn-n tn-s tn-p tn-s tn-n tn-r tn-l))
(setf harmonies (to-tonnetz '(eb4 gb4 bb4) moves))

(defun harmony-to-melody (harmonies voice-number)
  (let ((ret '()))
    (dolist (harmony harmonies)
      (setf ret (append ret (list (nth (- voice-number 1) harmony)))))
    (print ret)))

(setf melody-soprano (pitch-transpose 12 (harmony-to-melody harmonies 1)))
(setf melody-alto (harmony-to-melody harmonies 1))
(setf melody-tenor (pitch-transpose -12 (harmony-to-melody harmonies 2)))
(setf melody-bass (pitch-transpose -24 (harmony-to-melody harmonies 3)))

;;; REST IS BOILERPLATE ...
(setf size (/ (list-length harmonies) 2))
(setf bars (gen-repeat size '(4/4)))
(setf pause (length-span bars '(-q)))

(setf soprano (make-omn
 :length '(1/2)
 :pitch melody-soprano
 :velocity '(mp)
 :span :pitch))
(setf alto (make-omn
 :length '(1/2)
 :pitch melody-alto
 :velocity '(mp)
 :span :pitch))
(setf tenor (make-omn
 :length '(1/2)
 :pitch melody-tenor
 :velocity '(mp)
 :span :pitch))
(setf bass (make-omn
 :length '(1/2)
 :pitch melody-bass
 :velocity '(mp)
 :span :pitch))

;;;---------------------------------------------------------
;;; Score and Layout
;;;---------------------------------------------------------
(midi-destinations)
(def-score choir-satb
           (:title "Title"
            :composer "Composer"
            :copyright "Copyright Â© "
            :key-signature 'chromatic
            :time-signature '((1 1 1 1) 4)
            :tempo 42
            :layout (choir-satb-layout
                     'soprano 'alto 'tenor 'bass))
  
  (soprano
   :port 0
   :omn soprano
   :channel 1
   :sound 'gm
   :program 'choir-aahs
   :volume 100
   :pan 16
   :controllers (91 '(48))
   )
  
  (alto
   :omn alto
   :channel 2
   :sound 'gm
   :program 'choir-aahs
   :volume 100
   :pan 41
   :controllers (91 '(48))
   )
  
  (tenor
   :omn tenor
   :channel 3
   :sound 'gm
   :program 'choir-aahs
   :volume 100
   :pan 86
   :controllers (91 '(48))
   )
  
  (bass
   :omn bass
   :channel 4
   :sound 'gm
   :program 'choir-aahs
   :volume 100
   :pan 111
   :controllers (91 '(48))
   )
  )

